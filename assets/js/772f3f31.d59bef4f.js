"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[2878],{1540:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"consensus/harvester-algorithm","title":"Harvester Algorithm","description":"Approximately every 9.375 seconds, the full node sends a new signage point to the farmer, who sends it to each harvester.","source":"@site/docs/consensus/harvester-algorithm.md","sourceDirName":"consensus","slug":"/harvester-algorithm","permalink":"/harvester-algorithm","draft":false,"unlisted":false,"editUrl":"https://github.com/Chia-Network/chia-docs/blob/main/docs/consensus/harvester-algorithm.md","tags":[],"version":"current","frontMatter":{"title":"Harvester Algorithm","slug":"/harvester-algorithm"},"sidebar":"tutorialSidebar","previous":{"title":"Signage and Infusion Points","permalink":"/signage-and-infusion-points"},"next":{"title":"Multiple Blocks","permalink":"/consensus-multiple-blocks"}}');var n=s(4848),i=s(8453);const r={title:"Harvester Algorithm",slug:"/harvester-algorithm"},a=void 0,l={},h=[];function c(e){const t={a:"a",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Approximately every 9.375 seconds, the full node sends a new signage point to the farmer, who sends it to each harvester."}),"\n",(0,n.jsx)(t.p,{children:"The exact protocol message sent for each signage point is the following:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class PoolDifficulty:\n    difficulty: uint64\n    sub_slot_iters: uint64\n    pool_contract_puzzle_hash: bytes32\n\nclass NewSignagePointHarvester:\n    challenge_hash: bytes32\n    difficulty: uint64\n    sub_slot_iters: uint64\n    signage_point_index: uint8\n    sp_hash: bytes32\n    pool_difficulties: List[PoolDifficulty]\n"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"The harvester receives a signage point, and computes the plot filter:"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"plot filter bits = sha256(plot_id + challenge_hash + sp_hash)"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["If the resulting bits start with 9 zeroes, then the plot passes the filter. This does not require disk access, since the plot_ids are stored in memory. 2. For each of the plots passing the filter, a new thread is started, which performs the quality lookups. Recall that this requires around 7-9 random reads into the plot, one for each table. This is where the majority of the disk activity will be. On average, 1 of every 512 plots will perform this step. 3. required_iterations is computed, as explained in the ",(0,n.jsx)(t.a,{href:"/signage-and-infusion-points",children:"Signage and Infusion Points page"}),". If the farmer is currently farming for a pool, then the pool will use custom values for both ",(0,n.jsx)(t.code,{children:"difficulty"})," and ",(0,n.jsx)(t.code,{children:"sub-slot_iterations"}),". These values make it more likely that a proof will be found. The reason to use these values is to make it easier for the pool to determine the amount of storage a farmer currently has dedicated.\nIf required_iterations is less than the interval_iterations, this proof of space is good (it has won either a pool partial or a block). Most proofs will not pass this step. 5. For winning proofs, the whole proof is fetched on disk (approximately 64 random reads in the plot). 6. The proof is sent back to the farmer."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var o=s(6540);const n={},i=o.createContext(n);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);