"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[991],{709:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>n,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>u});const c=JSON.parse('{"id":"architecture/architecture-overview","title":"Architecture Overview","description":"chia-architecture","source":"@site/docs/architecture/architecture-overview.md","sourceDirName":"architecture","slug":"/architecture-overview","permalink":"/architecture-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Chia-Network/chia-docs/blob/main/docs/architecture/architecture-overview.md","tags":[],"version":"current","frontMatter":{"title":"Architecture Overview","slug":"/architecture-overview"},"sidebar":"tutorialSidebar","previous":{"title":"CLVM vs EVM","permalink":"/clvm-vs-evm"},"next":{"title":"Full Nodes","permalink":"/full-node-architecture"}}');var i=r(4848),o=r(8453);const s={title:"Architecture Overview",slug:"/architecture-overview"},n=void 0,a={},u=[];function h(e){const t={img:"img",p:"p",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"chia-architecture",src:r(1872).A+"",width:"1613",height:"1350"})}),"\n",(0,i.jsx)(t.p,{children:"The above diagram shows Chia's network architecture. A single machine can run more than one of these processes. In fact, the default configuration is to run four processes together: Farmer, Full Node, Harvester, and Wallet. Many farmers will also choose to run the Electron GUI and Pool processes. Additionally, a few farmers, especially those with multi-PiB farms, will choose to run a Timelord."}),"\n",(0,i.jsx)(t.p,{children:"Let's discuss each of these processes, and the protocols that connect them, separately."})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1872:(e,t,r)=>{r.d(t,{A:()=>c});const c=r.p+"assets/images/chia-network-architecture-8069f322a3b7e4ff7f79f137ea76b48d.png"},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>n});var c=r(6540);const i={},o=c.createContext(i);function s(e){const t=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),c.createElement(o.Provider,{value:t},e.children)}}}]);